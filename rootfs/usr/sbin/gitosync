#!/bin/bash

#------------------------------------------------------------------------------
# Run as 'git' user:
#------------------------------------------------------------------------------

[ ${EUID} -ne $(id -u git) ] && exec su git -c \
"${0} '${1}' '${2}' '${3}' '${4}' '${5}' '${6}' '${7}' '${8}' '${9}' \
'${10}' '${11}' '${12}' '${13}' '${14}'"

#------------------------------------------------------------------------------
# Globals:
#------------------------------------------------------------------------------

# Return codes:
readonly E_BAD_CMD=10
readonly E_BAD_CONF=11
readonly E_BAD_DIR=12
readonly E_BAD_CLONE=13

#------------------------------------------------------------------------------
# Parse the command-line arguments:
#------------------------------------------------------------------------------

while [ $# -gt 1 ]; do

  case $1 in

    --admin)
      ADMIN="$2"
      shift
      ;;

    --owner)
      OWNER="$2"
      shift
      ;;

    --description)
      DESCR="$2"
      shift
      ;;

    --category)
      CATEG="$2"
      shift
      ;;

    --repo)
      REPO="$2"
      shift
      ;;

    --mirror)
      [ "$2" == "true" ] && \
      MIRRO=$(echo ${REPO} | sed 's/https:\/\//git@/;s/.com\//.com:/')
      shift
      ;;

    --name)
      NAME="$2"
      shift
      ;;

    *) ;;

  esac

  shift

done

#------------------------------------------------------------------------------
# Validations and initializations:
#------------------------------------------------------------------------------

[ -z "${REPO}" ] && echo 'You must provide a git repository' && exit ${E_BAD_CONF}
[ -z "${NAME}" ] && NAME=$(echo ${REPO} | rev | awk -F'[/.]' '{print $2}' | rev)

#------------------------------------------------------------------------------
# If REPO already exist then fetch origin:
#------------------------------------------------------------------------------

[ -d ${HOME}/repositories/${NAME}.git ] && {

  cd ${HOME}/repositories/${NAME}.git
  git fetch origin '+*:*'

} && exit 0

#------------------------------------------------------------------------------
# If REPO does not exist:
#------------------------------------------------------------------------------

[ -d ${HOME}/.gitolite-admin.d ] || {
  mkdir ${HOME}/.gitolite-admin.d || \
  exit ${E_BAD_DIR}
}

[ -d ${HOME}/repositories/gitolite-admin.git ] || exit ${E_BAD_DIR}
echo -e "#[ auto-generated $(date) ]#\n" > ${HOME}/.gitolite-admin.d/00_header.conf

#------------------------------------------------------------------------------
# Clone gitolite-admin and the imported repo:
#------------------------------------------------------------------------------

[ ! -d ${HOME}/gitolite-admin ] && {
  git clone git@localhost:gitolite-admin ${HOME}/gitolite-admin || \
  exit ${E_BAD_CLONE}
}

cd ${HOME}/repositories && git clone --bare ${REPO} ${NAME}.git || \
exit ${E_BAD_CLONE}

#------------------------------------------------------------------------------
# Generate the configuration:
#------------------------------------------------------------------------------

CONF="repo ${NAME}\n"
[ -z "${OWNER}" ] || CONF="${CONF} config gitweb.owner = ${OWNER}\n"
[ -z "${DESCR}" ] || CONF="${CONF} config gitweb.description = ${DESCR}\n"
[ -z "${CATEG}" ] || CONF="${CONF} config gitweb.category = ${CATEG}\n"
[ -z "${MIRRO}" ] || CONF="${CONF} config gitolite.mirror.simple = ${MIRRO}\n"
[ -z "${ADMIN}" ] || CONF="${CONF} RW+ = ${ADMIN}"

echo -e ${CONF} > ${HOME}/.gitolite-admin.d/${NAME}.conf || exit ${E_BAD_CONF}
awk '/auto-generated/{exit}1' ${HOME}/gitolite-admin/conf/gitolite.conf > /tmp/conf
cat ${HOME}/.gitolite-admin.d/*.conf >> /tmp/conf
cat /tmp/conf > ${HOME}/gitolite-admin/conf/gitolite.conf

#------------------------------------------------------------------------------
# Commit and push:
#------------------------------------------------------------------------------

cd ${HOME}/gitolite-admin
git pull
git commit -am "Auto imported '${NAME}' repo"
git push
